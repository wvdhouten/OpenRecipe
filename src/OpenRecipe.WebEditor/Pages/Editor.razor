@using System.IO
@using System.Text.Json;
@using OpenRecipe.Serialization
@using OpenRecipe.WebEditor.Data;
@using OpenRecipe.WebEditor.Models
@inject EntityRepository<RecipeEntity> EntityRepository

@page "/editor"
@page "/editor/{Id}"

<PageTitle>Recipe Editor</PageTitle>
<EditForm Model="@Recipe" OnValidSubmit="HandleValidSubmit" class="form-horizontal">
    <div class="row mb-2">
        <label for="file" class="btn btn-secondary">Load</label>
        <InputFile id="file" OnChange="LoadFile" hidden />
    </div>
    <div class="row mb-2">
        <div class="col">
            <div class="form-floating">
                <input type="text" class="form-control" id="name" @bind="Recipe.Name" placeholder="">
                <label for="name">Name</label>
            </div>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col">
            <div class="form-floating">
                <textarea class="form-control" id="description" @bind="Recipe.Description" placeholder=""></textarea>
                <label for="description">Description</label>
            </div>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col">
            <div class="form-floating">
                <input type="text" class="form-control" id="source" @bind="Recipe.Source" placeholder="" />
                <label for="source">Source</label>
            </div>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col">
            <div class="form-floating">
                <input type="number" class="form-control" id="servings" @bind="Recipe.Servings" placeholder="" required />
                <label for="source">Servings</label>
            </div>
        </div>
        <div class="col">
            <div class="form-floating">
                <input type="number" class="form-control" id="prep-time" @bind="Recipe.PrepTime" placeholder="" />
                <label for="source">Preparation time</label>
            </div>
        </div>
        <div class="col">
            <div class="form-floating">
                <input type="number" class="form-control" id="cook-time" @bind="Recipe.CookTime" placeholder="" />
                <label for="source">Cooking time</label>
            </div>
        </div>
    </div>
    <fieldset class="row mb-2">
        <legend>Tags</legend>
        <div>
            @for (int i = 0; i < Recipe.Tags.Count; i++)
            {
                var index = i;
                <div class="btn-group mb-2 me-2">
                    <div class="input-group-text">@Recipe.Tags[index]</div>
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveTag(index)">&times;</button>
                </div>
            }
        </div>
        <div class="input-group">
            <div class="form-floating">
                <input type="text" class="form-control" id="new-tag" @bind="newTag" placeholder="" />
                <label for="new-tag">Tag</label>
            </div>
            <button type="button" class="btn btn-success" @onclick="AddTag">+</button>
        </div>
    </fieldset>
    <fieldset class="mb-2">
        <legend>Ingredients</legend>
        @foreach (var ingredient in Recipe.Ingredients)
        {
            <div class="row mb-2">
                <div class="input-group">
                    <div class="form-floating">
                        <input type="text" class="form-control" id="ingredient-name" @bind="ingredient.Name" placeholder="" />
                        <label for="ingredient-name">Name</label>
                    </div>
                    <div class="form-floating">
                        <input type="number" class="form-control" id="ingredient-quantity" @bind="ingredient.Quantity" placeholder="" />
                        <label for="ingredient-quantity">Quantity</label>
                    </div>
                    <div class="form-floating">
                        <input type="text" class="form-control" id="ingredient-unit" @bind="ingredient.Unit" placeholder="" />
                        <label for="ingredient-unit">Unit</label>
                    </div>
                    <div class="input-group-text">
                        <div class="form-check">
                            <input id="ingredient-isScaling" type="checkbox" @bind="ingredient.IsScaling" class="form-check-input" />
                            <label for="ingredient-isScaling" class="form-check-label">Scaling</label>
                        </div>
                    </div>
                    <button type="button" class="btn btn-success" @onclick="() => AddNote(ingredient)">+ Note</button>
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveIngredient(ingredient)">&times;</button>
                </div>
            </div>
            @for (int i = 0; i < ingredient.Notes.Count; i++)
            {
                var index = i;
                <div class="row mb-2">
                    <div class="input-group">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="note-value" @bind="ingredient.Notes[index]" placeholder="" />
                            <label for="note-value">Note</label>
                        </div>
                        <button type="button" class="btn btn-danger" @onclick="() => RemoveNote(ingredient, index)">&times;</button>
                    </div>
                </div>
            }
        }
        <div class="input-group">
            <div class="form-floating">
                <input type="text" class="form-control" id="new-ingredient" @bind="newIngredient" placeholder="" />
                <label for="new-ingredient">Ingredient</label>
            </div>
            <button type="button" class="btn btn-success" @onclick="AddIngredient">+</button>
        </div>
    </fieldset>
    <fieldset class="mb-2">
        <legend>Utilities</legend>
        @for (int i = 0; i < Recipe.Utilities.Count; i++)
        {
            var index = i;
            <div class="row mb-2">
                <div class="input-group">
                    <div class="form-floating">
                        <input type="text" class="form-control" id="utility-value" @bind="Recipe.Utilities[index]" placeholder="" />
                        <label for="utility-value">Utility</label>
                    </div>
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveUtility(index)">&times;</button>
                </div>
            </div>
        }
        <div class="input-group">
            <div class="form-floating">
                <input type="text" class="form-control" id="new-utility" @bind="newUtility" placeholder="" />
                <label for="new-utility">Utility</label>
            </div>
            <button type="button" class="btn btn-success" @onclick="AddUtility">+</button>
        </div>
    </fieldset>
    <fieldset class="mb-2">
        <legend>Instructions</legend>
        @for (int i = 0; i < Recipe.Instructions.Count; i++)
        {
            var index = i;
            <div class="row mb-2">
                <div class="input-group">
                    <div class="form-floating">
                        <input type="text" class="form-control" id="instruction-value" @bind="Recipe.Instructions[index]" placeholder="" />
                        <label for="instruction-value">Instruction</label>
                    </div>
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveInstruction(index)">&times;</button>
                </div>
            </div>
        }
        <div class="input-group">
            <div class="form-floating">
                <input type="text" class="form-control" id="new-instruction" @bind="newInstruction" placeholder="" />
                <label for="new-instruction">Instruction</label>
            </div>
            <button type="button" class="btn btn-success" @onclick="AddInstruction">+</button>
        </div>
    </fieldset>
    <fieldset class="mb-2">
        <legend>Notes</legend>
        @for (int i = 0; i < Recipe.Notes.Count; i++)
        {
            var index = i;
            <div class="row mb-2">
                <div class="input-group">
                    <div class="form-floating">
                        <input type="text" class="form-control" id="note-value" @bind="Recipe.Notes[index]" placeholder="" />
                        <label for="note-value">Note</label>
                    </div>
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveNote(index)">&times;</button>
                </div>
            </div>
        }
        <div class="input-group">
            <div class="form-floating">
                <input type="text" class="form-control" id="new-note" @bind="newNote" placeholder="" />
                <label for="new-note">Note</label>
            </div>
            <button type="button" class="btn btn-success" @onclick="AddNote">+</button>
        </div>
    </fieldset>
    <fieldset class="mb-2">
        <legend>Metadata</legend>
        @foreach (var item in Recipe.Metadata)
        {
            <div class="row mb-2">
                <div class="input-group">
                    <div class="form-floating">
                        <input type="text" class="form-control" id="metadata-key" value="@item.Key" placeholder="" readonly />
                        <label for="metadata-key">Key</label>
                    </div>
                    <div class="form-floating">
                        <input type="text" class="form-control" id="metadata-value" value="@item.Value" placeholder="" @onchange="(e) => Recipe.Metadata[item.Key] = e.Value?.ToString() ?? string.Empty" />
                        <label for="metadata-value">Value</label>
                    </div>
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveMetadata(item.Key)">&times;</button>
                </div>
            </div>
        }
        <div class="input-group">
            <div class="form-floating">
                <input type="text" class="form-control" id="new-metadata-key" @bind="@newMetadataKey" placeholder="" />
                <label for="new-metadata-key">Key</label>
            </div>
            <div class="form-floating">
                <input type="text" class="form-control" id="new-metadata-value" @bind="newMetadataValue" placeholder="" />
                <label for="new-metadata-value">Value</label>
            </div>
            <button type="button" class="btn btn-success" @onclick="AddMetadata">+</button>
        </div>
    </fieldset>
    <div class="row mb-2">
        <div class="col">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public string? Id { get; set; } = null;

    private RecipeEntity Recipe { get; set; } = new RecipeEntity { Id = Ulid.NewUlid().ToString() };

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
            Recipe = (await EntityRepository.GetAsync(Id)) ?? new RecipeEntity { Id = Ulid.NewUlid().ToString() };
    }

    private async Task HandleValidSubmit()
    {
        await EntityRepository.SetAsync(Recipe);
    }

    #region Ingredients

    private string newIngredient = string.Empty;

    private void AddIngredient()
    {
        if (string.IsNullOrWhiteSpace(newIngredient))
            return;

        Recipe.Ingredients.Add(new Ingredient { Name = newIngredient.Trim() });
        newIngredient = string.Empty;
    }

    private void RemoveIngredient(Ingredient ingredient)
    {
        Recipe.Ingredients.Remove(ingredient);
    }

    #endregion

    #region IngredientNotes

    private void AddNote(Ingredient ingredient)
    {
        ingredient.Notes.Add(string.Empty);
    }

    private void RemoveNote(Ingredient ingredient, int index)
    {
        ingredient.Notes.RemoveAt(index);
    }

    #endregion

    #region Utilities

    private string newUtility = string.Empty;

    private void AddUtility()
    {
        if (string.IsNullOrWhiteSpace(newUtility))
            return;

        Recipe.Utilities.Add(newUtility.Trim());
        newUtility = string.Empty;
    }

    private void RemoveUtility(int index)
    {
        Recipe.Utilities.RemoveAt(index);
    }

    #endregion

    #region Instructions

    private string newInstruction = string.Empty;

    private void AddInstruction()
    {
        if (string.IsNullOrWhiteSpace(newInstruction.Trim()))
            return;

        Recipe.Instructions.Add(newInstruction.Trim());
        newInstruction = string.Empty;
    }

    private void RemoveInstruction(int index)
    {
        Recipe.Instructions.RemoveAt(index);
    }

    #endregion

    #region Tags

    private string newTag = string.Empty;

    private void AddTag()
    {
        if (string.IsNullOrWhiteSpace(newTag))
            return;

        Recipe.Tags.Add(newTag.Trim());
        newTag = string.Empty;
    }

    private void RemoveTag(int index)
    {
        Recipe.Tags.RemoveAt(index);
    }

    #endregion

    #region Notes

    private string newNote = string.Empty;

    private void AddNote()
    {
        if (string.IsNullOrWhiteSpace(newNote))
            return;

        Recipe.Notes.Add(newNote.Trim());
        newNote = string.Empty;
    }

    private void RemoveNote(int index)
    {
        Recipe.Notes.RemoveAt(index);
    }

    #endregion

    #region Metadata

    private string newMetadataKey = string.Empty;
    private string newMetadataValue = string.Empty;

    private void AddMetadata()
    {
        if (string.IsNullOrWhiteSpace(newMetadataKey) || Recipe.Metadata.ContainsKey(newMetadataKey))
            return;

        Recipe.Metadata.Add(newMetadataKey.Trim(), newMetadataValue.Trim());

        newMetadataKey = string.Empty;
        newMetadataValue = string.Empty;
    }

    private void RemoveMetadata(string key)
    {
        Recipe.Metadata.Remove(key);
    }

    #endregion

    #region Interaction

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var serializedRecipe = await new StreamContent(e.File.OpenReadStream()).ReadAsStringAsync();
        Recipe = RecipeSerializer.Deserialize<RecipeEntity>(serializedRecipe);
    }

    #endregion
}