@using System.Text.Json;
@using OpenRecipe.WebEditor.Data;
@using OpenRecipe.WebEditor.Extensions
@using OpenRecipe.WebEditor.Models
@inject StorageContext DbContext
@inject Toaster Toaster
@page "/"
@page "/catalog"

<PageTitle>Recipe Catalog</PageTitle>
<section class="row mb-2">
    <div class="col-auto">
        <NavLink class="link-info" href="@($"/editor")">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
            </svg>
        </NavLink>
    </div>
</section>
<hr />
<section>
    <form class="form-horizontal">
        <div class="row mb-2">
            <div class="col-md">
                <div class="form-floating">
                    <input type="text" class="form-control" id="name" @bind="NameFilter" placeholder="" autocomplete="off">
                    <label for="name">Name/Description Filter</label>
                </div>
            </div>
            <div class="col-md">
                <div class="form-floating">
                    <input type="text" class="form-control" id="name" @bind="IngredientFilter" placeholder="" autocomplete="off">
                    <label for="name">Ingredient Filter</label>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                @foreach (var tag in KnownTags)
                {
                    <div class="btn-group mb-2 me-2">
                        <input type="checkbox" class="btn-check" id="@tag" name="tags" @onchange="e => UpdateTagSelection(tag, Convert.ToBoolean(e.Value))">
                        <label class="btn btn-sm btn-outline-warning" for="@tag">@tag</label>
                    </div>
                }
            </div>
        </div>
        <div class="row mb-2">
            <div class="col">
                <button type="button" class="btn btn-sm btn-info" @onclick="ApplyFilterAsync">Filter</button>
            </div>
        </div>
    </form>
</section>
<section>
    <pre>@RecipeCount recipes!</pre>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in SearchResults)
            {
                <tr>
                    <th scope="row">@item.Name</th>
                    <td>
                        <NavLink class="link-info" href="@($"/viewer/{item.Id}")">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                            </svg>
                        </NavLink>
                        <NavLink class="link-info" href="@($"/editor/{item.Id}")">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z" />
                            </svg>
                        </NavLink>
                        <a class="link-info" role="button" @onclick="() => DeleteRecipe(item)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                            </svg>
                        </a>
                        <Confirm @ref="ConfirmDeleteModal" TContext="RecipeEntity" Title="Delete recipe?" OnConfirm="ConfirmDeleteRecipeAsync"></Confirm>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</section>

@code {
    Confirm<RecipeEntity> ConfirmDeleteModal = null!;

    int RecipeCount = 0;
    IEnumerable<string> KnownTags = [];

    IList<string> SelectedTags = [];
    string NameFilter { get; set; } = string.Empty;
    string IngredientFilter { get; set; } = string.Empty;

    IEnumerable<RecipeEntity> SearchResults { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        SearchResults = await DbContext.Recipes.GetAsync();
        KnownTags = await DbContext.Recipes.GetTagsAsync();
        RecipeCount = SearchResults.Count();
    }

    private void UpdateTagSelection(string tag, bool isSelected)
    {
        if (isSelected)
            SelectedTags.Add(tag);
        else
            SelectedTags.Remove(tag);
    }

    private async Task ApplyFilterAsync()
    {
        SearchResults = await DbContext.Recipes.GetAsync(
            e => MatchesNameFilter(e)
            && MatchesIngredientFilter(e)
            && MatchesTagFilter(e)
        );
    }

    private bool MatchesNameFilter(RecipeEntity entity)
    {
        return entity.Name.Contains(NameFilter, StringComparison.OrdinalIgnoreCase)
        || (entity.Description != null
            && entity.Description.Contains(NameFilter, StringComparison.OrdinalIgnoreCase));
    }

    private bool MatchesIngredientFilter(RecipeEntity entity)
    {
        return entity.Ingredients.Any(i => i.Name.Contains(IngredientFilter, StringComparison.OrdinalIgnoreCase));
    }

    private bool MatchesTagFilter(RecipeEntity entity)
    {
        return SelectedTags.All(entity.Tags.Contains);
    }

    private void DeleteRecipe(RecipeEntity entity)
    {
        ConfirmDeleteModal.Show(entity, message: $"Are you sure you want to delete '{entity.Name}'?");
    }

    private async Task ConfirmDeleteRecipeAsync(RecipeEntity entity)
    {
        if (string.IsNullOrWhiteSpace(entity.Id))
            return;

        await DbContext.Recipes.RemoveAsync(entity.Id);

        var allRecipes = await DbContext.Recipes.GetAsync();
        KnownTags = await DbContext.Recipes.GetTagsAsync();
        RecipeCount = allRecipes.Count();

        await Toaster.CreateToastAsync($"Recipe '{entity.Name}' deleted.");

        await ApplyFilterAsync();
    }
}