@using System.Text.Json;
@using OpenRecipe.Serialization
@using OpenRecipe.WebEditor.Data;
@using OpenRecipe.WebEditor.Models
@inject RecipeRepository RecipeRepository

@page "/viewer"
@page "/viewer/{Id}"

<PageTitle>Recipe Viewer</PageTitle>
<div class="row mb-2">
    <div class="col-auto">
        <label for="file" class="btn btn-secondary">Load</label>
        <InputFile id="file" OnChange="LoadFile" hidden />
    </div>
</div>
@if (Recipe != null)
{
    <article>
        <header class="row">
            <h1>@Recipe.Name</h1>
            <h6>@Recipe.Description</h6>
            <hr />
            <div class="row">
                <div class="col-auto">
                    Prep: @($"{Recipe.PrepTime} min")
                </div>
                <div class="col-auto">
                    Cook: @($"{Recipe.CookTime} min")
                </div>
                <div class="col-auto">
                    Servings:
                    <a class="btn btn-sm btn-outline-primary" @onclick="() => DesiredServings--">-</a>
                    @DesiredServings
                    <a class="btn btn-sm btn-outline-primary" @onclick="() => DesiredServings++">+</a>
                    <a class="btn btn-sm btn-outline-primary" @onclick="() => DesiredServings = Recipe.Servings ?? 1">reset</a>
                </div>
            </div>
        </header>
        <section class="row">
            <h2>Ingredients</h2>
            <ul class="list-group">
                @foreach (var ingredient in Recipe.Ingredients)
                {
                    <li class="list-group-item">
                        <label>
                            <input class="form-check-input" type="checkbox" />
                            <span>@ingredient.Name: @ScaleIngredient(ingredient) @ingredient.Unit</span>
                        </label>
                    </li>
                }
            </ul>
        </section>
        <section class="row">
            <h2>Instructions</h2>
            <ul class="list-group">
                @foreach (var instruction in Recipe.Instructions)
                {
                    <li class="list-group-item">
                        <label>
                            <input class="form-check-input" type="checkbox" />
                            <span>@instruction</span>
                        </label>
                    </li>
                }
            </ul>
        </section>
        @if (Recipe.Notes.Any())
        {
            <section class="row">
                <h2>Notes</h2>
                <ul class="list-group">
                    @foreach (var note in Recipe.Notes)
                    {
                        <li class="list-group-item">@note</li>
                    }
                </ul>
            </section>
        }
    </article>
}

@code {
    [Parameter]
    public string? Id { get; set; } = null;
    private Recipe? Recipe { get; set; } = null;
    private int DesiredServings { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await RecipeRepository.InitAsync();
        if (Id == null)
            return;

        Recipe = await RecipeRepository.GetAsync(Id);
        if (Recipe == null)
            return;

        DesiredServings = Recipe.Servings ?? 0;
    }

    private double ScaleIngredient(Ingredient ingredient)
    {
        if (!ingredient.IsScaling)
            return ingredient.Quantity;

        return Math.Round(ingredient.Quantity / (Recipe?.Servings ?? 1) * DesiredServings, 2);
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        Recipe = RecipeSerializer.Deserialize(await new StreamContent(e.File.OpenReadStream()).ReadAsStringAsync());
    }
}
