@using System.Text.Json;
@using OpenRecipe.Serialization
@using OpenRecipe.WebEditor.Data;
@using OpenRecipe.WebEditor.Models
@inject EntityRepository<RecipeEntity> EntityRepository

@page "/viewer"
@page "/viewer/{Id}"

<PageTitle>Recipe Viewer</PageTitle>
<div class="row mb-2">
    <label for="file" class="btn btn-secondary">Load</label>
    <InputFile id="file" OnChange="LoadFile" hidden />
</div>
@if (Recipe != null)
{
    <article>
        <header>
            <h1>@Recipe.Name</h1>
            <h6>@Recipe.Description</h6>
            <div>
                <span>Servings: @Recipe.Servings</span>
                <span>Preparation Time: @Recipe.PrepTime</span>
                <span>Cooking Time: @Recipe.CookTime</span>
            </div>
        </header>
        <section>
            <h2>Ingredients</h2>
            <ul>
                @foreach (var ingredient in Recipe.Ingredients)
                {
                    <li>@ingredient.Name: @ingredient.Quantity @ingredient.Unit</li>
                }
            </ul>
        </section>
        <section>
            <h2>Instructions</h2>
            <ul>
                @foreach (var instruction in Recipe.Instructions)
                {
                    <li>@instruction</li>
                }
            </ul>
        </section>
        @if (Recipe.Notes.Any())
        {
            <section>
                <h2>Notes</h2>
                <ul>
                    @foreach (var note in Recipe.Notes)
                    {
                        <li>@note</li>
                    }
                </ul>
            </section>
        }
    </article>
}

@code {
    [Parameter]
    public string? Id { get; set; } = null;
    private Recipe? Recipe { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
            Recipe = await EntityRepository.GetAsync(Id);
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var recipeString = await new StreamContent(e.File.OpenReadStream()).ReadAsStringAsync();
        Recipe = RecipeSerializer.Deserialize(recipeString);
    }
}
