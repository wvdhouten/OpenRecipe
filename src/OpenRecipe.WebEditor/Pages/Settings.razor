@using System.Text.Json;
@using Octokit
@using OpenRecipe.Serialization
@using OpenRecipe.WebEditor.Data;
@using OpenRecipe.WebEditor.Models
@using OpenRecipe.WebEditor.Models.Git
@using OpenRecipe.WebEditor.Utils
@using System.Text.RegularExpressions
@inject StorageContext DbContext
@inject IJSRuntime JS
@page "/settings"

<script>
    window.downloadFile = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
    }
</script>

<h3>Settings</h3>
<pre>@RecipeCount recipes!</pre>

<section>
    <div class="row mb-2">
        <div class="col-md-auto">
            <button type="button" class="btn btn-primary" @onclick="ClearAsync">Clear</button>
        </div>
        <div class="col-md-auto">
            <label for="file" class="btn btn-primary">Import Archive</label>
            <InputFile id="file" OnChange="ImportArchiveAsync" hidden />
        </div>
        <div class="col-md-auto">
            <button type="button" class="btn btn-primary" @onclick="ExportArchiveAsync">Export Archive</button>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-lg">
            <div class="form-floating">
                <input type="text" class="form-control" id="git-user" @bind="GitUser" placeholder="">
                <label for="git-user">GitHub User</label>
            </div>
        </div>
        <div class="col-lg">
            <div class="form-floating">
                <input type="text" class="form-control" id="git-repository" @bind="GitRepository" placeholder="">
                <label for="git-repository">GitHub Repository</label>
            </div>
        </div>
        <div class="col-lg">
            <div class="form-floating">
                <input type="text" class="form-control" id="git-branch" @bind="GitBranch" placeholder="">
                <label for="git-branch">GitHub Branch</label>
            </div>
        </div>
        <div class="col-lg-auto">
            <button type="button" class="btn btn-primary" @onclick="ImportRepositoryAsync">ImportRepository</button>
        </div>
    </div>
    <div class="row">
        <div class="col-lg">
            <div class="form-floating">
                <input type="password" class="form-control" id="git-pat" @bind="GitPat" placeholder="">
                <label for="git-pat">GitHub PAT</label>
            </div>
        </div>
    </div>
</section>

@code {
    int RecipeCount = 0;

    private string GitUser = "wvdhouten";
    private string GitRepository = "recipes";
    private string GitBranch = "main";
    private string GitPat = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var patSetting = await DbContext.Settings.GetAsync(nameof(GitPat));
        GitPat = patSetting?.Value ?? string.Empty;

        await UpdateCountsAsync();
    }

    private async Task ClearAsync()
    {
        await DbContext.Recipes.ClearAsync();
        await UpdateCountsAsync();
    }

    private async Task UpdateCountsAsync()
    {
        RecipeCount = (await DbContext.Recipes.GetAsync()).Count();
    }

    private async Task ImportRepositoryAsync()
    {
        if (string.IsNullOrWhiteSpace(GitUser)
        || string.IsNullOrWhiteSpace(GitRepository)
        || string.IsNullOrWhiteSpace(GitBranch))
            return;

        var request = new HttpRequestMessage(HttpMethod.Get, $"https://api.github.com/repos/{GitUser}/{GitRepository}/git/trees/{GitBranch}?recursive=1");
        using var client = new HttpClient();
        var response = await client.SendAsync(request);
        var tree = await response.Content.ReadFromJsonAsync<GitTree>();
        foreach (var item in tree!.Tree)
            await TryImportFileAsync(client, item);

        await UpdateCountsAsync();
    }

    private async Task TryImportFileAsync(HttpClient client, GitTreeItem item)
    {
        if (!item.Path.EndsWith(".yuml"))
            return;

        var request = new HttpRequestMessage(HttpMethod.Get, item.Url);
        var response = await client.SendAsync(request);
        var file = await response.Content.ReadFromJsonAsync<GitTreeFile>();

        byte[] data = Convert.FromBase64String(file!.Content);
        string content = System.Text.Encoding.UTF8.GetString(data);

        var recipe = RecipeSerializer.Deserialize<RecipeEntity>(content);
        recipe.Id ??= Ulid.NewUlid().ToString();

        await DbContext.Recipes.SetAsync(recipe);
    }

    private async Task ImportArchiveAsync(InputFileChangeEventArgs e)
    {
        using var memoryStream = new MemoryStream();
        using (var fileStream = new StreamContent(e.File.OpenReadStream(5 * 1024 * 1024)).ReadAsStream())
        {
            await fileStream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;
        }

        var contents = await ArchiveUtil.UnpackAsync(memoryStream);

        foreach (var (id, content) in contents)
        {
            var recipe = RecipeSerializer.Deserialize<RecipeEntity>(content);
            recipe.Id ??= Ulid.NewUlid().ToString();
            await DbContext.Recipes.SetAsync(recipe);
        }

        await UpdateCountsAsync();
    }

    private async Task ExportArchiveAsync()
    {
        var recipes = await DbContext.Recipes.GetAsync();

        var contents = recipes.Select(recipe => (recipe.Id!, RecipeSerializer.Serialize(recipe)));
        using var stream = await ArchiveUtil.PackAsync(contents);
        using var reference = new DotNetStreamReference(stream: stream);

        await JS.InvokeVoidAsync("downloadFile", "open-recipe-archive.zip", reference);
    }
}